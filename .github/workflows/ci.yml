name: üîç CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest

    strategy:
      matrix:
        configuration: [Debug, Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for MinVer

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore

    - name: Run tests
      run: dotnet test --configuration ${{ matrix.configuration }} --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage --logger trx --logger "console;verbosity=detailed"

    - name: Process coverage reports
      if: matrix.configuration == 'Debug'
      run: |
        Write-Host "Processing coverage reports..."

        # Find all coverage files
        $coverageFiles = Get-ChildItem -Recurse -Path "./coverage" -Filter "coverage.cobertura.xml"
        Write-Host "Found $($coverageFiles.Count) coverage files:"
        $coverageFiles | ForEach-Object { Write-Host "  - $($_.FullName)" }

        # Create a clean output directory
        if (Test-Path "./codecov") { Remove-Item "./codecov" -Recurse -Force }
        New-Item -ItemType Directory -Path "./codecov" -Force | Out-Null

        # Copy the first coverage file to clean directory
        if ($coverageFiles.Count -gt 0) {
          $firstFile = $coverageFiles[0]
          Copy-Item $firstFile.FullName "./codecov/coverage.cobertura.xml"
          Write-Host "Copied coverage file to: ./codecov/coverage.cobertura.xml"

          # Remove all original coverage directories to prevent conflicts
          Write-Host "Cleaning up original coverage files..."
          Get-ChildItem -Path "./coverage" -Directory | ForEach-Object {
            Write-Host "  Removing: $($_.FullName)"
            Remove-Item $_.FullName -Recurse -Force
          }
        }

    - name: Generate HTML coverage report and upload to Codecov
      if: matrix.configuration == 'Debug'
      run: |
        # Install reportgenerator for HTML reports
        dotnet tool install -g dotnet-reportgenerator-globaltool

        # Generate HTML report if coverage file exists
        if (Test-Path "./codecov/coverage.cobertura.xml") {
          New-Item -ItemType Directory -Path "./coverage/report" -Force | Out-Null
          reportgenerator -reports:"./codecov/coverage.cobertura.xml" -targetdir:"./coverage/report" -reporttypes:"Html"
          Write-Host "HTML coverage report generated at ./coverage/report/"
        }

    - name: Upload coverage reports to Codecov
      if: matrix.configuration == 'Debug'
      uses: codecov/codecov-action@v4
      with:
        file: ./codecov/coverage.cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        override_branch: main
        override_build: ${{ github.run_number }}
        override_commit: ${{ github.sha }}
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage artifacts
      if: matrix.configuration == 'Debug'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage/report/
        retention-days: 30

  code-quality:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Check code formatting
      run: |
        Write-Host "Checking code formatting..."
        dotnet format --verify-no-changes --verbosity diagnostic
        if ($LASTEXITCODE -eq 0) {
          Write-Host "‚úÖ Code formatting is correct"
        } else {
          Write-Host ""
          Write-Host "‚ùå Code formatting issues found!"
          Write-Host ""
          Write-Host "To fix this:"
          Write-Host "1. Run: dotnet format"
          Write-Host "2. Or use: .\format-code.ps1"
          Write-Host "3. Commit the formatted changes"
          Write-Host ""
          exit 1
        }

    - name: Build with warnings as errors
      run: dotnet build --configuration Release --verbosity normal
