name: 📦 Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  build-and-release:
    runs-on: windows-latest

    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for MinVer

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Run tests
      run: dotnet test --configuration Release --verbosity normal

    - name: Build Release
      run: dotnet build --configuration Release --no-restore

    - name: Publish Windows x64
      run: dotnet publish src/EdBindings/EdBindings.csproj --configuration Release --runtime win-x64 --self-contained true --output ./publish/win-x64

    - name: Publish Windows x86
      run: dotnet publish src/EdBindings/EdBindings.csproj --configuration Release --runtime win-x86 --self-contained true --output ./publish/win-x86

    - name: Get Version
      id: version
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = $env:GITHUB_REF -replace 'refs/tags/', ''
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
        Write-Host "📋 Using version: $version" -ForegroundColor Green

    - name: 🔨 Build MSI Installer (WiX v6.0.2)
      run: |
        # Install WiX v6.0.2 via .NET Tool (latest version, free for MIT projects)
        Write-Host "🔽 Installing WiX Toolset v6.0.2..." -ForegroundColor Cyan
        dotnet tool install --global wix --version 6.0.2
        
        # Verify WiX installation
        Write-Host "✅ WiX v6 installed successfully" -ForegroundColor Green
        wix --version
        
        # Create MSI using PowerShell script with WiX v5
        Write-Host "🏗️ Building MSI installer..." -ForegroundColor Green
        $version = "${{ steps.version.outputs.VERSION }}"
        Write-Host "Building MSI for version: $version" -ForegroundColor Cyan
        $buildSuccess = & .\setup\Build-MSI.ps1 -SourcePath "./publish/win-x64" -OutputPath "./publish" -Version $version

        # Create MSI using PowerShell script
        Write-Host "🏗️ Building MSI installer..." -ForegroundColor Green
        $version = "${{ steps.version.outputs.VERSION }}"
        Write-Host "Building MSI for version: $version" -ForegroundColor Cyan

        # Verify WiX is accessible
        try {
          $candleVersion = & candle.exe -? 2>&1 | Select-Object -First 1
          Write-Host "✅ WiX Candle accessible: $candleVersion" -ForegroundColor Green
        } catch {
          Write-Host "⚠️ WiX Candle not accessible, MSI build will create instructions only" -ForegroundColor Yellow
        }

        $buildSuccess = & .\setup\Build-MSI.ps1 -SourcePath "./publish/win-x64" -OutputPath "./publish" -Version $version

        if (-not $buildSuccess) {
          Write-Host "ℹ️ MSI build requires manual steps - check BUILD_INSTRUCTIONS.txt in release" -ForegroundColor Yellow
        }

        # Fallback: Create detailed build guide if MSI build fails
        if (-not $buildSuccess -or -not (Test-Path "./publish/EdBindings-*.msi")) {
          Write-Host "⚠️ MSI build not completed, creating comprehensive build guide..." -ForegroundColor Yellow

          $buildGuide = @"
        # 🔨 EdBindings MSI Build Guide

        ## Quick Start
        The automated MSI build requires WiX Toolset. Choose your preferred method:

        ### Method 1: WiX Toolset (Automated)
        ``````powershell
        # Run the automated build script
        .\setup\Build-MSI.ps1 -SourcePath "./publish/win-x64" -OutputPath "./publish" -Version $env:VERSION
        ``````

        ### Method 2: Visual Studio (Manual)
        1. Open ``setup/EDBindingsSetup/EDBindingsSetup.vdproj`` in Visual Studio 2022
        2. Install "Microsoft Visual Studio Installer Projects" extension if prompted
        3. Build → Build Solution (Ctrl+Shift+B)
        4. MSI will be generated in ``setup/EDBindingsSetup/Release/``

        ### Method 3: Alternative Installers
        - **NSIS**: Lightweight, script-based installer
        - **Inno Setup**: Free, professional-looking installers
        - **Advanced Installer**: Commercial with GUI builder
        - **Squirrel.Windows**: Modern .NET updater framework

        ### Method 4: WiX v6.0.2 (.NET Tool) - Current
        - **Latest**: Uses WiX v6.0.2 (newest version with latest features)
        - **Modern**: .NET-based toolset with improved performance
        - **MIT Licensed**: Free for open-source projects like EdBindings
        - **Command**: ``dotnet tool install --global wix --version 6.0.2``

        ## Files Included
        - 📁 **Published Application**: ``./publish/win-x64/`` (Ready for packaging)
        - 📄 **WiX v6 Source**: ``setup/EdBindings-v6.wxs`` (Current format)
        - 📄 **WiX v5 Source**: ``setup/EdBindings-v5.wxs`` (Fallback)
        - 📄 **WiX v3 Source**: ``setup/EdBindings.wxs`` (Legacy format)
        - 🔧 **Build Script**: ``setup/Build-MSI.ps1`` (Auto-detects WiX version)
        - 📋 **Legacy Project**: ``setup/EDBindingsSetup/`` (Visual Studio project)

        ## Distribution Options
        1. **ZIP Release**: ``EdBindings-win-x64.zip`` (Available now)
        2. **MSI Installer**: Create using methods above
        3. **Chocolatey**: Package for ``choco install`` distribution
        4. **Portable**: Single executable with dependencies

        > 💡 **Tip**: For immediate distribution, use the ZIP releases. MSI provides better Windows integration and uninstall support.
        "@

          Set-Content -Path "./publish/MSI_BUILD_GUIDE.md" -Value $buildGuide
          Write-Host "📖 Created comprehensive MSI build guide" -ForegroundColor Green
        }

    - name: Create ZIP archives
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        Compress-Archive -Path "./publish/win-x64/*" -DestinationPath "./EdBindings-$version-win-x64.zip"
        Compress-Archive -Path "./publish/win-x86/*" -DestinationPath "./EdBindings-$version-win-x86.zip"

    - name: Create Release Notes
      id: release_notes
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $isPrerelease = "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.prerelease == 'true' || contains(steps.version.outputs.VERSION, '-') }}"

        $releaseType = ""
        if ($isPrerelease -eq "true") {
          $releaseType = "`n> **⚠️ This is a pre-release version** - Use with caution and please report any issues.`n"
        }

        $notes = @"
        ## EdBindings $version
        $releaseType
        ### What's Changed
        - Built with .NET 8.0 for improved performance and security
        - Modern Windows 11-style user interface
        - Enhanced key binding visualization for Elite Dangerous

        ### Downloads
        - **Windows x64**: EdBindings-win-x64.zip (Recommended for 64-bit Windows)
        - **Windows x86**: EdBindings-win-x86.zip (For 32-bit Windows)

        ### System Requirements
        - Windows 10 version 1809 or later
        - .NET 8.0 Runtime (included in self-contained builds)

        ### Installation
        1. Download the appropriate ZIP file for your system
        2. Extract to a folder of your choice
        3. Run EdBindings.exe

        For MSI installer, please check the setup folder in the source code.
        "@

        $notes | Out-File -FilePath "./release_notes.md" -Encoding utf8
        echo "NOTES_FILE=./release_notes.md" >> $env:GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: EdBindings ${{ steps.version.outputs.VERSION }}
        body_path: ${{ steps.release_notes.outputs.NOTES_FILE }}
        draft: false
        prerelease: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.prerelease == 'true' || contains(steps.version.outputs.VERSION, '-') }}
        files: |
          ./EdBindings-${{ steps.version.outputs.VERSION }}-win-x64.zip
          ./EdBindings-${{ steps.version.outputs.VERSION }}-win-x86.zip
          ./publish/EdBindings-*.msi
          ./publish/MSI_BUILD_GUIDE.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EdBindings-Release-${{ steps.version.outputs.VERSION }}
        path: |
          ./publish/
          ./EdBindings-*.zip
        retention-days: 90
