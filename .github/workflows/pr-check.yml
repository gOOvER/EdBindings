name: üîç Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_target:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

concurrency:
  group: pr-check-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # AI Code Review with CodeRabbit
  coderabbit-review:
    name: ü§ñ CodeRabbit AI Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    permissions:
      contents: read
      pull-requests: write
      issues: write
      
    steps:
      - name: ü§ñ CodeRabbit Review
        uses: coderabbitai/openai-pr-reviewer@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          debug: false
          review_simple_changes: true
          review_comment_lgtm: false
          openai_light_model: gpt-4o-mini
          openai_heavy_model: gpt-4o
          openai_timeout_ms: 120000
          language: de
          path_filters: |
            !**/*.min.js
            !**/*.min.css  
            !**/bin/**
            !**/obj/**
            !**/*.Designer.cs
            !**/AssemblyInfo.cs
            !**/*.g.cs
          system_message: |
            Du bist ein erfahrener .NET/C# Entwickler f√ºr das EdBindings Elite Dangerous Tool.
            Fokussiere dich auf:
            - üõ°Ô∏è Sicherheitsprobleme in WPF-Anwendungen
            - ‚ö° Performance-Optimierungen f√ºr .NET 8.0  
            - üìã Best Practices f√ºr C# und WPF
            - üêõ Potentielle Bugs und Null-Reference-Exceptions
            - üßπ Code-Qualit√§t und Wartbarkeit
            - üì¶ MSI Installer Sicherheit
            - üîß GitHub Actions Workflow Sicherheit
            
            Gebe konstruktives Feedback auf Deutsch mit Code-Beispielen.

  # Security and dependency scanning
  security-scan:
    name: üõ°Ô∏è Security Scan
    runs-on: windows-latest
    if: github.event.pull_request.draft == false

    permissions:
      security-events: write
      contents: read
      pull-requests: read

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: üì¶ Restore dependencies
      run: dotnet restore --verbosity normal

    - name: üîç Run dependency vulnerability scan
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | Tee-Object -FilePath vulnerability-report.txt
        if (Select-String -Path vulnerability-report.txt -Pattern "has the following vulnerable packages") {
          Write-Host "::error::Vulnerable dependencies found!"
          Get-Content vulnerability-report.txt
          exit 1
        }

    - name: üìä Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        queries: +security-and-quality

    - name: üèóÔ∏è Build for CodeQL analysis
      run: |
        dotnet build --configuration Release --no-restore --verbosity minimal

    - name: üî¨ Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:csharp"

    - name: üì§ Upload vulnerability report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: vulnerability-report
        path: vulnerability-report.txt
        retention-days: 30

  # Code quality analysis
  code-quality:
    name: üìä Code Quality
    runs-on: windows-latest
    if: github.event.pull_request.draft == false

    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: üì¶ Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: üì¶ Restore dependencies
      run: dotnet restore --verbosity normal

    - name: üîç Install code analysis tools
      run: |
        dotnet tool install --global dotnet-outdated-tool
        dotnet tool install --global security-scan
        dotnet tool install --global dotnet-format

    - name: üìù Check code formatting
      run: |
        Write-Host "::group::Code Formatting Check"
        $formatResult = dotnet format --verify-no-changes --verbosity diagnostic 2>&1
        if ($LASTEXITCODE -ne 0) {
          Write-Host "::error::Code formatting issues found!"
          Write-Host $formatResult
          Write-Host "::notice::Run 'dotnet format' to fix formatting issues"
          exit 1
        }
        Write-Host "::endgroup::"

    - name: üèóÔ∏è Build solution
      run: |
        Write-Host "::group::Build Solution"
        dotnet build --configuration Release --no-restore --verbosity normal --property:TreatWarningsAsErrors=true --property:WarningsAsErrors= --property:WarningsNotAsErrors=CS1591
        Write-Host "::endgroup::"

    - name: üß™ Run unit tests with coverage
      run: |
        Write-Host "::group::Unit Tests with Coverage"
        dotnet test --configuration Release --no-build --verbosity normal `
          --collect:"XPlat Code Coverage" `
          --results-directory ./coverage `
          --logger "trx;LogFileName=test-results.trx" `
          --logger "GitHubActions;summary.includePassedTests=true" `
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        Write-Host "::endgroup::"

    - name: üìä Generate coverage report
      run: |
        Write-Host "::group::Coverage Report Generation"
        dotnet tool install --global dotnet-reportgenerator-globaltool
        reportgenerator `
          -reports:"coverage/**/coverage.opencover.xml" `
          -targetdir:"coverage/report" `
          -reporttypes:"Html;JsonSummary;MarkdownSummaryGithub" `
          -title:"EdBindings PR #${{ github.event.pull_request.number }} Coverage"
        Write-Host "::endgroup::"

    - name: üìà Coverage comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: always()
      with:
        recreate: true
        path: coverage/report/SummaryGithub.md

    - name: üìä Check outdated packages
      run: |
        Write-Host "::group::Outdated Packages Check"
        dotnet outdated --output json > outdated-packages.json
        $outdated = Get-Content outdated-packages.json | ConvertFrom-Json
        if ($outdated.Projects.Count -gt 0) {
          Write-Host "::warning::Outdated packages found. Consider updating dependencies."
          dotnet outdated
        }
        Write-Host "::endgroup::"

    - name: üì§ Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          **/*.trx
          coverage/report/**/*
          outdated-packages.json
        retention-days: 30

    - name: üìã Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: .NET Tests
        path: '**/*.trx'
        reporter: dotnet-trx
        fail-on-error: true

  # Performance regression testing
  performance-check:
    name: ‚ö° Performance Check
    runs-on: windows-latest
    if: github.event.pull_request.draft == false

    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: üì¶ Restore and build
      run: |
        dotnet restore --verbosity minimal
        dotnet build --configuration Release --no-restore --verbosity minimal

    - name: üìä Performance baseline check
      run: |
        Write-Host "::group::Performance Analysis"
        # Check binary size
        $binPath = "src/EdBindings/bin/Release/net8.0-windows"
        if (Test-Path $binPath) {
          $exeSize = (Get-Item "$binPath/EdBindings.exe").Length
          $totalSize = (Get-ChildItem $binPath -Recurse | Measure-Object -Property Length -Sum).Sum

          Write-Host "::notice::Binary size: $([math]::Round($exeSize/1MB, 2)) MB"
          Write-Host "::notice::Total output size: $([math]::Round($totalSize/1MB, 2)) MB"

          # Warn if binary is unusually large
          if ($exeSize -gt 50MB) {
            Write-Host "::warning::Binary size is quite large ($([math]::Round($exeSize/1MB, 2)) MB). Consider investigating."
          }
        }
        Write-Host "::endgroup::"

    - name: üîç Memory usage analysis
      run: |
        Write-Host "::group::Static Analysis"
        # Check for potential memory leaks in code patterns
        $codeIssues = @()

        # Check for event handlers without unsubscription
        $eventHandlers = Select-String -Path "src/**/*.cs" -Pattern "\..*\+=" -AllMatches
        if ($eventHandlers.Count -gt 0) {
          Write-Host "::notice::Found $($eventHandlers.Count) event subscriptions. Ensure proper cleanup."
        }

        # Check for IDisposable implementations
        $disposables = Select-String -Path "src/**/*.cs" -Pattern "class.*:.*IDisposable" -AllMatches
        Write-Host "::notice::Found $($disposables.Count) IDisposable implementations."

        Write-Host "::endgroup::"

  # Documentation and changelog check
  documentation-check:
    name: üìö Documentation Check
    runs-on: windows-latest
    if: github.event.pull_request.draft == false

    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0

    - name: üîç Check for documentation updates
      run: |
        echo "::group::Documentation Analysis"

        # Check if code changes require documentation updates
        changed_files=$(git diff --name-only origin/main...HEAD)
        code_changes=$(echo "$changed_files" | grep -E '\.(cs|xaml)$' | wc -l)
        doc_changes=$(echo "$changed_files" | grep -E '\.(md|txt)$' | wc -l)

        echo "Code files changed: $code_changes"
        echo "Documentation files changed: $doc_changes"

        if [ "$code_changes" -gt 5 ] && [ "$doc_changes" -eq 0 ]; then
          echo "::warning::Significant code changes detected without documentation updates. Consider updating README.md or adding release notes."
        fi

        # Check README.md exists and is not empty
        if [ ! -f "README.md" ] || [ ! -s "README.md" ]; then
          echo "::error::README.md is missing or empty"
          exit 1
        fi

        echo "::endgroup::"

    - name: üìù Spell check documentation
      uses: crate-ci/typos@master

  # PR validation summary
  pr-validation-summary:
    name: üìã PR Validation Summary
    runs-on: windows-latest
    needs: [security-scan, code-quality, performance-check, documentation-check]
    if: always() && github.event.pull_request.draft == false

    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: üìä Evaluate PR quality
      run: |
        echo "::group::PR Validation Results"

        security_result="${{ needs.security-scan.result }}"
        quality_result="${{ needs.code-quality.result }}"
        performance_result="${{ needs.performance-check.result }}"
        docs_result="${{ needs.documentation-check.result }}"

        echo "Security Scan: $security_result"
        echo "Code Quality: $quality_result"
        echo "Performance Check: $performance_result"
        echo "Documentation Check: $docs_result"

        failed_checks=0
        if [ "$security_result" != "success" ]; then failed_checks=$((failed_checks + 1)); fi
        if [ "$quality_result" != "success" ]; then failed_checks=$((failed_checks + 1)); fi
        if [ "$performance_result" != "success" ]; then failed_checks=$((failed_checks + 1)); fi
        if [ "$docs_result" != "success" ]; then failed_checks=$((failed_checks + 1)); fi

        if [ $failed_checks -eq 0 ]; then
          echo "::notice::‚úÖ All PR checks passed! Ready for review."
        elif [ $failed_checks -eq 1 ]; then
          echo "::warning::‚ö†Ô∏è 1 check failed. Please review and fix issues."
        else
          echo "::error::‚ùå $failed_checks checks failed. Please address issues before review."
        fi

        echo "::endgroup::"

    - name: üéØ PR readiness check
      run: |
        if [ "${{ needs.security-scan.result }}" != "success" ] || [ "${{ needs.code-quality.result }}" != "success" ]; then
          echo "::error::Critical checks failed. PR is not ready for merge."
          exit 1
        else
          echo "::notice::PR passes critical checks and is ready for review! üöÄ"
        fi
