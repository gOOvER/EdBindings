name: 📊 Code Quality Analysis (Windows)

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  code-quality:
    name: 📊 Code Quality Analysis
    runs-on: windows-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 📦 Restore dependencies
      run: dotnet restore

    - name: 🏗️ Build project
      run: dotnet build --no-restore --configuration Release

    - name: 📊 Code Metrics Analysis
      shell: pwsh
      run: |
        Write-Host "::group::📊 Code Metrics"
        
        # Count source files
        $cs_files = (Get-ChildItem -Path src -Filter "*.cs" -Recurse -File).Count
        
        if ($cs_files -gt 0) {
          $total_lines = (Get-ChildItem -Path src -Filter "*.cs" -Recurse | Get-Content | Measure-Object -Line).Lines
          Write-Host "📁 C# Files: $cs_files"
          Write-Host "📏 Total Lines: $total_lines"
          Write-Host "✅ Code Metrics: Analysis complete"
          "metrics_status=success" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        } else {
          Write-Host "❌ Code Metrics: No source files found"
          "metrics_status=failure" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        }
        
        Write-Host "::endgroup::"
      id: metrics

    - name: 🔬 Static Analysis  
      shell: pwsh
      run: |
        Write-Host "::group::🔬 Static Analysis"
        
        # Check if project builds successfully
        $buildResult = dotnet build --no-restore --configuration Release --verbosity quiet
        if ($LASTEXITCODE -eq 0) {
          Write-Host "✅ Build: Successful"
          Write-Host "✅ Static Analysis: No critical issues"
          "analysis_status=success" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        } else {
          Write-Host "❌ Build: Failed with errors"
          Write-Host "❌ Static Analysis: Critical issues detected"
          "analysis_status=failure" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        }
        
        Write-Host "::endgroup::"
      id: analysis

    - name: 📚 Documentation Quality
      shell: pwsh
      run: |
        Write-Host "::group::📚 Documentation Check"
        
        # Check README existence and quality
        if (Test-Path "README.md") {
          $readme_lines = (Get-Content README.md | Measure-Object -Line).Lines
          Write-Host "📖 README: Found with $readme_lines lines"
          
          if ($readme_lines -gt 10) {
            Write-Host "✅ Documentation: Good README coverage"
            "docs_status=success" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            Write-Host "⚠️ Documentation: README could be more detailed"
            "docs_status=success" | Out-File -FilePath $env:GITHUB_OUTPUT -Append  # Don't fail for short README
          }
        } else {
          Write-Host "❌ Documentation: No README found"
          "docs_status=failure" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        }
        
        # Check for XML documentation
        $xml_docs = (Get-ChildItem -Path src -Filter "*.cs" -Recurse | Select-String -Pattern "/// <summary>" | Select-Object -Unique Path).Count
        if ($xml_docs -gt 0) {
          Write-Host "📝 XML Documentation: Found in $xml_docs files"
        }
        
        Write-Host "::endgroup::"
      id: docs

    - name: 📊 Quality Summary Report
      if: always()
      shell: pwsh
      run: |
        Write-Host "::group::📊 Code Quality Summary"
        
        $metrics_result = "${{ steps.metrics.outputs.metrics_status }}"
        $analysis_result = "${{ steps.analysis.outputs.analysis_status }}"
        $docs_result = "${{ steps.docs.outputs.docs_status }}"
        
        if ([string]::IsNullOrEmpty($metrics_result)) { $metrics_result = "unknown" }
        if ([string]::IsNullOrEmpty($analysis_result)) { $analysis_result = "unknown" }
        if ([string]::IsNullOrEmpty($docs_result)) { $docs_result = "unknown" }
        
        Write-Host "| Quality Check | Status | Details |"
        Write-Host "|---------------|--------|---------|"
        Write-Host "| Code Metrics | $metrics_result | Lines of code, complexity analysis |"
        Write-Host "| Static Analysis | $analysis_result | Code style, potential issues |"
        Write-Host "| Documentation | $docs_result | README, XML docs, spell check |"
        Write-Host ""
        
        # Calculate overall score
        $score = 0
        $total = 3
        
        if ($metrics_result -eq "success") { $score++ }
        if ($analysis_result -eq "success") { $score++ }
        if ($docs_result -eq "success") { $score++ }
        
        $percentage = [math]::Round(($score * 100 / $total), 0)
        
        Write-Host "## 🎯 Overall Quality Score: $percentage%"
        Write-Host ""
        
        if ($percentage -ge 90) {
          Write-Host "🏆 **Excellent!** Your code meets high quality standards."
        } elseif ($percentage -ge 70) {
          Write-Host "✅ **Good!** Code quality is acceptable with minor improvements possible."
        } elseif ($percentage -ge 50) {
          Write-Host "⚠️ **Needs Improvement** Several quality issues need attention."
        } else {
          Write-Host "❌ **Poor Quality** Significant improvements required."
        }
        
        Write-Host "::endgroup::"
        
        # Exit with error if quality is too low (optional - can be disabled)
        # if ($percentage -lt 50) {
        #   exit 1
        # }